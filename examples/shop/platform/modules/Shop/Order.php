<?php
namespace Shop;

require_once __DIR__.'/OrderJsonConverter.php';
require_once __DIR__.'/OrderArrayConverter.php';
require_once __DIR__.'/Customer.php';
require_once __DIR__.'/Product.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property int $customerID used by reference $customer (read-only)
 * @property string $customerURI reference to an object of class "Shop\Customer" (read-only)
 * @property \Shop\Customer $customer an object of class "Shop\Customer"
 * @property string $productsURI reference to an array of objects of class "Shop\Order"
 * @property array $products an array of objects of class "Shop\Product"
 *
 * @package Shop
 * @version 0.9.9 beta
 */
class Order extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $customerID;
    protected $customerURI;
    protected $customer;
    protected $productsURI;
    protected $products;

    /**
     * Constructs object using a key-property array or instance of class "Shop\Order"
     *
     * @param array|void $data key-property array or instance of class "Shop\Order" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('customerID', $data))
            $data['customerID'] = 0; // an integer number
        if(!array_key_exists('productsURI', $data))
            $data['productsURI'] = array(); // references to an array of objects of class "Shop\Product"
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('customerID', $data))
            $this->setCustomerID($data['customerID']);
        unset($data['customerID']);
        if (array_key_exists('customer', $data))
            $this->setCustomer($data['customer']);
        unset($data['customer']);
        if(array_key_exists('customerURI', $data))
            $this->customerURI = \NGS\Converter\PrimitiveConverter::toString($data['customerURI']);
        unset($data['customerURI']);
        if (array_key_exists('products', $data))
            $this->setProducts($data['products']);
        unset($data['products']);
        if(array_key_exists('productsURI', $data))
            $this->productsURI = \NGS\Converter\PrimitiveConverter::toStringArray($data['productsURI']);
        unset($data['productsURI']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Shop\Order" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return an integer number
     */
    public function getCustomerID()
    {
        return $this->customerID;
    }

    /**
     * @return a reference to an object of class "Shop\Customer"
     */
    public function getCustomerURI()
    {
        return $this->customerURI;
    }

    /**
     * @return an object of class "Shop\Customer"
     */
    public function getCustomer()
    {
        if ($this->customerURI !== null && $this->customer === null)
            $this->customer = \NGS\Patterns\Repository::instance()->find('Shop\\Customer', $this->customerURI);
        return $this->customer;
    }

    /**
     * @return references to an array of objects of class "Shop\Product"
     */
    public function getProductsURI()
    {
        return $this->productsURI;
    }

    /**
     * @return an array of objects of class "Shop\Product"
     */
    public function getProducts()
    {
        if ($this->productsURI && $this->products === null)
            $this->products = \NGS\Patterns\Repository::instance()->find('Shop\\Product', $this->productsURI);
        return $this->products;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'customerID')
            return $this->getCustomerID(); // an integer number
        if ($name === 'customerURI')
            return $this->getCustomerURI(); // a reference to an object of class "Shop\Customer"
        if ($name === 'customer')
            return $this->getCustomer(); // an object of class "Shop\Customer"
        if ($name === 'productsURI')
            return $this->getProductsURI(); // references to an array of objects of class "Shop\Product"
        if ($name === 'products')
            return $this->getProducts(); // an array of objects of class "Shop\Product"

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Shop\Order" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'customer')
            return true; // an object of class "Shop\Customer" (always set)
        if ($name === 'products')
            return true; // an array of objects of class "Shop\Product" (always set)
        if ($name === 'productsURI')
            return true; // an array of objects of class "Shop\Product" (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'customerID', 'customerURI', 'productsURI');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setCustomerID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "customerID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->customerID = $value;
        return $value;
    }

    /**
     * @param \Shop\Customer $value an object of class "Shop\Customer"
     *
     * @return \Shop\Customer
     */
    public function setCustomer($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "customer" cannot be set to null because it is non-nullable!');
        $value = \Shop\CustomerArrayConverter::fromArray($value);
        if ($value->URI === null)
            throw new \InvalidArgumentException('Value of property "customer" cannot have URI set to null because it\'s a reference! Reference values must have non-null URIs!');
        $this->customer = $value;
        $this->customerURI = $value->URI;
        $this->customerID = $value->ID;
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Shop\Product"
     *
     * @return array
     */
    public function setProducts($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "products" cannot be set to null because it is non-nullable!');
        $value = \Shop\ProductArrayConverter::fromArrayList($value, false);
        if($value !== null)
            foreach($value as $index => $val)
                if ($val->URI === null)
                    throw new \InvalidArgumentException('URI property of element at index "'.$index.'" was null! Root elements must have non-null URIs.');
        $this->products = $value;
            $this->productsURI = array();
            foreach($value as $val)
                $this->productsURI[] = $val->URI;

        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Shop\Order" cannot be set, because it is read-only!');
        if ($name === 'customer')
            return $this->setCustomer($value); // an object of class "Shop\Customer"
        if ($name === 'products')
            return $this->setProducts($value); // an array of objects of class "Shop\Product"
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Shop\Order" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'customer')
            throw new \LogicException('The property "customer" cannot be unset because it is non-nullable!'); // an object of class "Shop\Customer" (cannot be unset)
        if ($name === 'products')
            throw new \LogicException('The property "products" cannot be unset because it is non-nullable!'); // references to an array of objects of class "Shop\Product" (cannot be unset)
    }

    /**
     * Create or update Shop\Order instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        if ($this->customerURI === null && $this->customerID !== null) {
            throw new \LogicException('Cannot persist instance of "Shop\Order" because reference "customer" was not assigned');
        }
        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Shop\Order $result)
    {
        $this->URI = $result->URI;

        $this->customerID = $result->customerID;
        $this->customer = $result->customer;
        $this->customerURI = $result->customerURI;
        $this->products = $result->products;
        $this->productsURI = $result->productsURI;
        $this->ID = $result->ID;
    }

    /**
     * Add an instance of \Shop\Product to 'products' array
     *
     * Workaround for lack of ability to add elements to array property using native array assignments (e.g. $object->products[] = $item;)
     *
     * @param $item \Shop\Product|array Instance or property=>value array
     * @throws \InvalidArgumentException
     */
    public function addproducts($item)
    {
        if(is_array($item)) {
            $item = new \Shop\Product($item);
        } elseif(!$item instanceof \Shop\Product) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Shop\Product"');
        } elseif($this->productsURI !== null && in_array($item->URI, $this->productsURI, true)) {
            throw new \InvalidArgumentException('Can\'t add $item. Root with same URI is already in \'products\' array');
        }
        if(!isset($item->URI)) {
            throw new \InvalidArgumentException('Element in collection property "products" cannot have URI set to null, because it\'s a reference! Reference values must have non-null URIs!');
        }
        if($this->products === null) {
            $this->products = array();
        }
        if($this->productsURI === null) {
            $this->productsURI = array();
        }
        $this->products[] = $item;
        $this->productsURI[] = $item->URI;
    }

    /**
     * Remove item from 'products' array
     *
     * @param \Shop\Product|string|array Instance, item URI, or property=>value array (?remove?)
     * @throws \InvalidArgumentException
     */
    public function removeproducts($item)
    {
        if(is_array($item)) {
            if (!isset($item['URI']) || !is_string($item['URI'])) {
                throw new \InvalidArgumentException('Can\'t remove item with invalid URI');
            }
            $itemURI = $item['URI'];
        } elseif(is_string($item)) {
            $itemURI = $item;
        } elseif(!$item instanceof \Shop\Product) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Shop\Product"');
        } else {
            $itemURI = $item->URI;
        }
        if ($this->products === null) {
            return ;
        }
        $itemIndex = array_search($itemURI, $this->productsURI);
        if($itemIndex !== false) {
            array_splice($this->products, $itemIndex, 1);
            array_splice($this->productsURI, $itemIndex, 1);
        }
    }

    public function toJson()
    {
        return \Shop\OrderJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Shop\OrderJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Shop\Order'.$this->toJson();
    }

    public function __clone()
    {
        return \Shop\OrderArrayConverter::fromArray(\Shop\OrderArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Shop\OrderArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Shop\OrderArrayConverter::toArray($this));
    }
}