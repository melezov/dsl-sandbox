<?php
namespace Cinema;

require_once __DIR__.'/MovieJsonConverter.php';
require_once __DIR__.'/MovieArrayConverter.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property string $title a string
 * @property string $shortTitle a string of length 10
 * @property int $year an integer number
 * @property int $durationSeconds an integer number
 * @property float $violenceFactor a floating point number
 * @property float $loudnessIndex a floating point number
 * @property bool $under18 a boolean value
 * @property array $awards a map[string, string]
 *
 * @package Cinema
 * @version 0.9.9 beta
 */
class Movie extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $title;
    protected $shortTitle;
    protected $year;
    protected $durationSeconds;
    protected $violenceFactor;
    protected $loudnessIndex;
    protected $under18;
    protected $awards;

    /**
     * Constructs object using a key-property array or instance of class "Cinema\Movie"
     *
     * @param array|void $data key-property array or instance of class "Cinema\Movie" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('title', $data))
            $data['title'] = ''; // a string
        if(!array_key_exists('shortTitle', $data))
            $data['shortTitle'] = ''; // a string of length 10
        if(!array_key_exists('year', $data))
            $data['year'] = 0; // an integer number
        if(!array_key_exists('durationSeconds', $data))
            $data['durationSeconds'] = 0; // an integer number
        if(!array_key_exists('violenceFactor', $data))
            $data['violenceFactor'] = 0.; // a floating point number
        if(!array_key_exists('loudnessIndex', $data))
            $data['loudnessIndex'] = 0.; // a floating point number
        if(!array_key_exists('under18', $data))
            $data['under18'] = false; // a boolean value
        if(!array_key_exists('awards', $data))
            $data['awards'] = array(); // a map[string, string]
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('title', $data))
            $this->setTitle($data['title']);
        unset($data['title']);
        if (array_key_exists('shortTitle', $data))
            $this->setShortTitle($data['shortTitle']);
        unset($data['shortTitle']);
        if (array_key_exists('year', $data))
            $this->setYear($data['year']);
        unset($data['year']);
        if (array_key_exists('durationSeconds', $data))
            $this->setDurationSeconds($data['durationSeconds']);
        unset($data['durationSeconds']);
        if (array_key_exists('violenceFactor', $data))
            $this->setViolenceFactor($data['violenceFactor']);
        unset($data['violenceFactor']);
        if (array_key_exists('loudnessIndex', $data))
            $this->setLoudnessIndex($data['loudnessIndex']);
        unset($data['loudnessIndex']);
        if (array_key_exists('under18', $data))
            $this->setUnder18($data['under18']);
        unset($data['under18']);
        if (array_key_exists('awards', $data))
            $this->setAwards($data['awards']);
        unset($data['awards']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Cinema\Movie" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return a string of length 10
     */
    public function getShortTitle()
    {
        return $this->shortTitle;
    }

    /**
     * @return an integer number
     */
    public function getYear()
    {
        return $this->year;
    }

    /**
     * @return an integer number
     */
    public function getDurationSeconds()
    {
        return $this->durationSeconds;
    }

    /**
     * @return a floating point number
     */
    public function getViolenceFactor()
    {
        return $this->violenceFactor;
    }

    /**
     * @return a floating point number
     */
    public function getLoudnessIndex()
    {
        return $this->loudnessIndex;
    }

    /**
     * @return a boolean value
     */
    public function getUnder18()
    {
        return $this->under18;
    }

    /**
     * @return a map[string, string]
     */
    public function getAwards()
    {
        return $this->awards;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'title')
            return $this->getTitle(); // a string
        if ($name === 'shortTitle')
            return $this->getShortTitle(); // a string of length 10
        if ($name === 'year')
            return $this->getYear(); // an integer number
        if ($name === 'durationSeconds')
            return $this->getDurationSeconds(); // an integer number
        if ($name === 'violenceFactor')
            return $this->getViolenceFactor(); // a floating point number
        if ($name === 'loudnessIndex')
            return $this->getLoudnessIndex(); // a floating point number
        if ($name === 'under18')
            return $this->getUnder18(); // a boolean value
        if ($name === 'awards')
            return $this->getAwards(); // a map[string, string]

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Cinema\Movie" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'title')
            return true; // a string (always set)
        if ($name === 'shortTitle')
            return true; // a string of length 10 (always set)
        if ($name === 'year')
            return true; // an integer number (always set)
        if ($name === 'durationSeconds')
            return true; // an integer number (always set)
        if ($name === 'violenceFactor')
            return true; // a floating point number (always set)
        if ($name === 'loudnessIndex')
            return true; // a floating point number (always set)
        if ($name === 'under18')
            return true; // a boolean value (always set)
        if ($name === 'awards')
            return true; // a map[string, string] (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setTitle($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "title" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->title = $value;
        return $value;
    }

    /**
     * @param string $value a string of length 10
     *
     * @return string
     */
    public function setShortTitle($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "shortTitle" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toFixedString($value, 10);
        $this->shortTitle = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    public function setYear($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "year" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->year = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    public function setDurationSeconds($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "durationSeconds" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->durationSeconds = $value;
        return $value;
    }

    /**
     * @param float $value a floating point number
     *
     * @return float
     */
    public function setViolenceFactor($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "violenceFactor" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toFloat($value);
        $this->violenceFactor = $value;
        return $value;
    }

    /**
     * @param float $value a floating point number
     *
     * @return float
     */
    public function setLoudnessIndex($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "loudnessIndex" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toFloat($value);
        $this->loudnessIndex = $value;
        return $value;
    }

    /**
     * @param bool $value a boolean value
     *
     * @return bool
     */
    public function setUnder18($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "under18" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toBoolean($value);
        $this->under18 = $value;
        return $value;
    }

    /**
     * @param array $value a map[string, string]
     *
     * @return array
     */
    public function setAwards($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "awards" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toMap($value);
        $this->awards = $value;
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Cinema\Movie" cannot be set, because it is read-only!');
        if ($name === 'title')
            return $this->setTitle($value); // a string
        if ($name === 'shortTitle')
            return $this->setShortTitle($value); // a string of length 10
        if ($name === 'year')
            return $this->setYear($value); // an integer number
        if ($name === 'durationSeconds')
            return $this->setDurationSeconds($value); // an integer number
        if ($name === 'violenceFactor')
            return $this->setViolenceFactor($value); // a floating point number
        if ($name === 'loudnessIndex')
            return $this->setLoudnessIndex($value); // a floating point number
        if ($name === 'under18')
            return $this->setUnder18($value); // a boolean value
        if ($name === 'awards')
            return $this->setAwards($value); // a map[string, string]
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Cinema\Movie" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'title')
            throw new \LogicException('The property "title" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'shortTitle')
            throw new \LogicException('The property "shortTitle" cannot be unset because it is non-nullable!'); // a string of length 10 (cannot be unset)
        if ($name === 'year')
            throw new \LogicException('The property "year" cannot be unset because it is non-nullable!'); // an integer number (cannot be unset)
        if ($name === 'durationSeconds')
            throw new \LogicException('The property "durationSeconds" cannot be unset because it is non-nullable!'); // an integer number (cannot be unset)
        if ($name === 'violenceFactor')
            throw new \LogicException('The property "violenceFactor" cannot be unset because it is non-nullable!'); // a floating point number (cannot be unset)
        if ($name === 'loudnessIndex')
            throw new \LogicException('The property "loudnessIndex" cannot be unset because it is non-nullable!'); // a floating point number (cannot be unset)
        if ($name === 'under18')
            throw new \LogicException('The property "under18" cannot be unset because it is non-nullable!'); // a boolean value (cannot be unset)
        if ($name === 'awards')
            throw new \LogicException('The property "awards" cannot be unset because it is non-nullable!'); // a map[string, string] (cannot be unset)
    }

    /**
     * Create or update Cinema\Movie instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Cinema\Movie $result)
    {
        $this->URI = $result->URI;

        $this->title = $result->title;
        $this->shortTitle = $result->shortTitle;
        $this->year = $result->year;
        $this->durationSeconds = $result->durationSeconds;
        $this->violenceFactor = $result->violenceFactor;
        $this->loudnessIndex = $result->loudnessIndex;
        $this->under18 = $result->under18;
        $this->awards = $result->awards;
        $this->ID = $result->ID;
    }

    public function toJson()
    {
        return \Cinema\MovieJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Cinema\MovieJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Cinema\Movie'.$this->toJson();
    }

    public function __clone()
    {
        return \Cinema\MovieArrayConverter::fromArray(\Cinema\MovieArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Cinema\MovieArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Cinema\MovieArrayConverter::toArray($this));
    }
}