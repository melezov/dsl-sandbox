<?php
namespace Library;

require_once __DIR__.'/BookJsonConverter.php';
require_once __DIR__.'/BookArrayConverter.php';
require_once __DIR__.'/Page.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property string $title a string
 * @property int $number autogenerated by server (read-only)
 * @property array $tags an array of strings, can be null
 * @property array $pages an array of objects of class "Library\Page"
 *
 * @package Library
 * @version 0.9.9 beta
 */
class Book extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $title;
    protected $number;
    protected $tags;
    protected $pages;

    /**
     * Constructs object using a key-property array or instance of class "Library\Book"
     *
     * @param array|void $data key-property array or instance of class "Library\Book" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('title', $data))
            $data['title'] = ''; // a string
        if(!array_key_exists('number', $data))
            $data['number'] = 0; // an integer number
        if(!array_key_exists('pages', $data))
            $data['pages'] = array(); // an array of objects of class "Library\Page"
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('title', $data))
            $this->setTitle($data['title']);
        unset($data['title']);
        if (array_key_exists('number', $data))
            $this->setNumber($data['number']);
        unset($data['number']);
        if (array_key_exists('tags', $data))
            $this->setTags($data['tags']);
        unset($data['tags']);
        if (array_key_exists('pages', $data))
            $this->setPages($data['pages']);
        unset($data['pages']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Library\Book" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return an integer number
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * @return an array of strings, can be null
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * @return an array of objects of class "Library\Page"
     */
    public function getPages()
    {
        return $this->pages;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'title')
            return $this->getTitle(); // a string
        if ($name === 'number')
            return $this->getNumber(); // an integer number
        if ($name === 'tags')
            return $this->getTags(); // an array of strings, can be null
        if ($name === 'pages')
            return $this->getPages(); // an array of objects of class "Library\Page"

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Library\Book" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'title')
            return true; // a string (always set)
        if ($name === 'tags')
            return $this->getTags() !== null; // an array of strings, can be null
        if ($name === 'pages')
            return true; // an array of objects of class "Library\Page" (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'number');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        if($this->pages !== null) {
            foreach($this->pages as $child) {
                if($child->BookID !== $value)
                    $child->__setInternalpages($this);
            }
        }
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setTitle($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "title" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->title = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setNumber($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "number" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->number = $value;
        return $value;
    }

    /**
     * @param array $value an array of strings, can be null
     *
     * @return array
     */
    public function setTags($value)
    {
        $value = $value !== null ? \NGS\Converter\PrimitiveConverter::toStringArray($value, false) : null;
        $this->tags = $value;
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Library\Page"
     *
     * @return array
     */
    public function setPages($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "pages" cannot be set to null because it is non-nullable!');
        $value = \Library\PageArrayConverter::fromArrayList($value, false);
        $this->pages = $value;
        if($this->pages !== null) {
            foreach($this->pages as $i => $child) {
                $child->Index = $i;
                $child->__setInternalpages($this);
            }
        }
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Library\Book" cannot be set, because it is read-only!');
        if ($name === 'title')
            return $this->setTitle($value); // a string
        if ($name === 'tags')
            return $this->setTags($value); // an array of strings, can be null
        if ($name === 'pages')
            return $this->setPages($value); // an array of objects of class "Library\Page"
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Library\Book" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'title')
            throw new \LogicException('The property "title" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'tags')
            $this->setTags(null);; // an array of strings, can be null
        if ($name === 'pages')
            throw new \LogicException('The property "pages" cannot be unset because it is non-nullable!'); // references to an array of objects of class "Library\Page" (cannot be unset)
    }

    /**
     * Create or update Library\Book instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Library\Book $result)
    {
        $this->URI = $result->URI;

        $this->title = $result->title;
        $this->number = $result->number;
        $this->tags = $result->tags;
        $this->pages = $result->pages;
        $this->ID = $result->ID;
    }
    public function addPages($item)
    {
        if(is_array($item)) {
            $item = \Library\Page($item);
        } elseif(!$item instanceof \Library\Page) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Library\Page"');
        }
        $list = $this->pages;
        if($list === null)
            $list = array();
        $item->__setInternalpages($this);
        $list[] = $item;
        $item->Index = count($list) - 1;
        $this->pages = $list;
    }

    public function removePages($item)
    {
        if(is_array($item)) {
            $item = \Library\Page($item);
        } elseif(!$item instanceof \Library\Page) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Library\Page"');
        }
        $list = $this->pages;
        if($list === null)
            $list = array();
        $itemIndex = array_search($item, $list);
        if($itemIndex !== false) {
            array_splice($list, $itemIndex, 1);

            $count = count($list);
            for($i = $itemIndex; $i < $count; $i++) {
                $list[$i]->Index = $i;
            }
            $this->pages = $list;
        }
    }

    public function toJson()
    {
        return \Library\BookJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Library\BookJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Library\Book'.$this->toJson();
    }

    public function __clone()
    {
        return \Library\BookArrayConverter::fromArray(\Library\BookArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Library\BookArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Library\BookArrayConverter::toArray($this));
    }
}