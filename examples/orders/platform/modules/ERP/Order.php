<?php
namespace ERP;

require_once __DIR__.'/OrderJsonConverter.php';
require_once __DIR__.'/OrderArrayConverter.php';
require_once __DIR__.'/Customer.php';
require_once __DIR__.'/LineItem.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property \NGS\LocalDate $created a date
 * @property \NGS\LocalDate $delivery a date, can be null
 * @property int $customerID used by reference $customer (read-only)
 * @property string $customerURI reference to an object of class "ERP\Customer" (read-only)
 * @property \ERP\Customer $customer an object of class "ERP\Customer"
 * @property array $items an array of objects of class "ERP\LineItem"
 * @property \NGS\Money $totalCost a money amount, calculated by server (read-only)
 *
 * @package ERP
 * @version 0.9.9 beta
 */
class Order extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $created;
    protected $delivery;
    protected $customerID;
    protected $customerURI;
    protected $customer;
    protected $items;
    protected $totalCost;

    /**
     * Constructs object using a key-property array or instance of class "ERP\Order"
     *
     * @param array|void $data key-property array or instance of class "ERP\Order" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('created', $data))
            $data['created'] = new \NGS\LocalDate(); // a date
        if(!array_key_exists('customerID', $data))
            $data['customerID'] = 0; // an integer number
        if(!array_key_exists('items', $data))
            $data['items'] = array(); // an array of objects of class "ERP\LineItem"
        if(!array_key_exists('totalCost', $data))
            $data['totalCost'] = new \NGS\Money(0); // a money amount, calculated by server
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('created', $data))
            $this->setCreated($data['created']);
        unset($data['created']);
        if (array_key_exists('delivery', $data))
            $this->setDelivery($data['delivery']);
        unset($data['delivery']);
        if (array_key_exists('customerID', $data))
            $this->setCustomerID($data['customerID']);
        unset($data['customerID']);
        if (array_key_exists('customer', $data))
            $this->setCustomer($data['customer']);
        unset($data['customer']);
        if(array_key_exists('customerURI', $data))
            $this->customerURI = \NGS\Converter\PrimitiveConverter::toString($data['customerURI']);
        unset($data['customerURI']);
        if (array_key_exists('items', $data))
            $this->setItems($data['items']);
        unset($data['items']);
        if (isset($data['totalCost']))
            $this->totalCost = new \NGS\Money($data['totalCost']);
        unset($data['totalCost']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "ERP\Order" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a date
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * @return a date, can be null
     */
    public function getDelivery()
    {
        return $this->delivery;
    }

    /**
     * @return an integer number
     */
    public function getCustomerID()
    {
        return $this->customerID;
    }

    /**
     * @return a reference to an object of class "ERP\Customer"
     */
    public function getCustomerURI()
    {
        return $this->customerURI;
    }

    /**
     * @return an object of class "ERP\Customer"
     */
    public function getCustomer()
    {
        if ($this->customerURI !== null && $this->customer === null)
            $this->customer = \NGS\Patterns\Repository::instance()->find('ERP\\Customer', $this->customerURI);
        return $this->customer;
    }

    /**
     * @return an array of objects of class "ERP\LineItem"
     */
    public function getItems()
    {
        return $this->items;
    }

    /**
     * @return a money amount, calculated by server
     */
    public function getTotalCost()
    {
        return $this->totalCost;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'created')
            return $this->getCreated(); // a date
        if ($name === 'delivery')
            return $this->getDelivery(); // a date, can be null
        if ($name === 'customerID')
            return $this->getCustomerID(); // an integer number
        if ($name === 'customerURI')
            return $this->getCustomerURI(); // a reference to an object of class "ERP\Customer"
        if ($name === 'customer')
            return $this->getCustomer(); // an object of class "ERP\Customer"
        if ($name === 'items')
            return $this->getItems(); // an array of objects of class "ERP\LineItem"
        if ($name === 'totalCost')
            return $this->getTotalCost(); // a money amount, calculated by server

        throw new \InvalidArgumentException('Property "'.$name.'" in class "ERP\Order" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'created')
            return true; // a date (always set)
        if ($name === 'delivery')
            return $this->getDelivery() !== null; // a date, can be null
        if ($name === 'customer')
            return true; // an object of class "ERP\Customer" (always set)
        if ($name === 'items')
            return true; // an array of objects of class "ERP\LineItem" (always set)
        if ($name === 'totalCost')
            return true; // a money amount, calculated by server (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'customerID', 'customerURI', 'totalCost');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        if($this->items !== null) {
            foreach($this->items as $child) {
                if($child->OrderID !== $value)
                    $child->__setInternalitems($this);
            }
        }
        return $value;
    }

    /**
     * @param \NGS\LocalDate $value a date
     *
     * @return \NGS\LocalDate
     */
    public function setCreated($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "created" cannot be set to null because it is non-nullable!');
        $value = new \NGS\LocalDate($value);
        $this->created = $value;
        return $value;
    }

    /**
     * @param \NGS\LocalDate $value a date, can be null
     *
     * @return \NGS\LocalDate
     */
    public function setDelivery($value)
    {
        $value = $value !== null ? new \NGS\LocalDate($value) : null;
        $this->delivery = $value;
        return $value;
    }

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setCustomerID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "customerID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->customerID = $value;
        return $value;
    }

    /**
     * @param \ERP\Customer $value an object of class "ERP\Customer"
     *
     * @return \ERP\Customer
     */
    public function setCustomer($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "customer" cannot be set to null because it is non-nullable!');
        $value = \ERP\CustomerArrayConverter::fromArray($value);
        if ($value->URI === null)
            throw new \InvalidArgumentException('Value of property "customer" cannot have URI set to null because it\'s a reference! Reference values must have non-null URIs!');
        $this->customer = $value;
        $this->customerURI = $value->URI;
        $this->customerID = $value->ID;
        return $value;
    }

    /**
     * @param array $value an array of objects of class "ERP\LineItem"
     *
     * @return array
     */
    public function setItems($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "items" cannot be set to null because it is non-nullable!');
        $value = \ERP\LineItemArrayConverter::fromArrayList($value, false);
        $this->items = $value;
        if($this->items !== null) {
            foreach($this->items as $i => $child) {
                $child->Index = $i;
                $child->__setInternalitems($this);
            }
        }
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "ERP\Order" cannot be set, because it is read-only!');
        if ($name === 'created')
            return $this->setCreated($value); // a date
        if ($name === 'delivery')
            return $this->setDelivery($value); // a date, can be null
        if ($name === 'customer')
            return $this->setCustomer($value); // an object of class "ERP\Customer"
        if ($name === 'items')
            return $this->setItems($value); // an array of objects of class "ERP\LineItem"
        throw new \InvalidArgumentException('Property "'.$name.'" in class "ERP\Order" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'created')
            throw new \LogicException('The property "created" cannot be unset because it is non-nullable!'); // a date (cannot be unset)
        if ($name === 'delivery')
            $this->setDelivery(null);; // a date, can be null
        if ($name === 'customer')
            throw new \LogicException('The property "customer" cannot be unset because it is non-nullable!'); // an object of class "ERP\Customer" (cannot be unset)
        if ($name === 'items')
            throw new \LogicException('The property "items" cannot be unset because it is non-nullable!'); // references to an array of objects of class "ERP\LineItem" (cannot be unset)
    }

    /**
     * Create or update ERP\Order instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        if ($this->customerURI === null && $this->customerID !== null) {
            throw new \LogicException('Cannot persist instance of "ERP\Order" because reference "customer" was not assigned');
        }
        if ($this->items !== null) {
            foreach ($this->items as $this_items) {
                if ($this_items->productURI === null && $this_items->productID !== null) {
                    throw new \LogicException('Cannot persist instance of "ERP\Order" because reference "product" (in "ERP\LineItem") was not assigned');
                }
            }
        }
        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\ERP\Order $result)
    {
        $this->URI = $result->URI;

        $this->created = $result->created;
        $this->delivery = $result->delivery;
        $this->customerID = $result->customerID;
        $this->customer = $result->customer;
        $this->customerURI = $result->customerURI;
        $this->items = $result->items;
        $this->totalCost = $result->totalCost;
        $this->ID = $result->ID;
    }
    public function addItems($item)
    {
        if(is_array($item)) {
            $item = \ERP\LineItem($item);
        } elseif(!$item instanceof \ERP\LineItem) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "ERP\LineItem"');
        }
        $list = $this->items;
        if($list === null)
            $list = array();
        $item->__setInternalitems($this);
        $list[] = $item;
        $item->Index = count($list) - 1;
        $this->items = $list;
    }

    public function removeItems($item)
    {
        if(is_array($item)) {
            $item = \ERP\LineItem($item);
        } elseif(!$item instanceof \ERP\LineItem) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "ERP\LineItem"');
        }
        $list = $this->items;
        if($list === null)
            $list = array();
        $itemIndex = array_search($item, $list);
        if($itemIndex !== false) {
            array_splice($list, $itemIndex, 1);

            $count = count($list);
            for($i = $itemIndex; $i < $count; $i++) {
                $list[$i]->Index = $i;
            }
            $this->items = $list;
        }
    }

    public function toJson()
    {
        return \ERP\OrderJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \ERP\OrderJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'ERP\Order'.$this->toJson();
    }

    public function __clone()
    {
        return \ERP\OrderArrayConverter::fromArray(\ERP\OrderArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \ERP\OrderArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\ERP\OrderArrayConverter::toArray($this));
    }
}