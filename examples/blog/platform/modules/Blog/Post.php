<?php
namespace Blog;

require_once __DIR__.'/PostJsonConverter.php';
require_once __DIR__.'/PostArrayConverter.php';
require_once __DIR__.'/Comment.php';
require_once __DIR__.'/../Security/User.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property string $title a string
 * @property string $content a string
 * @property \NGS\LocalDate $createdAt a date
 * @property array $comments an array of objects of class "Blog\Comment"
 * @property string $userID used by reference $user (read-only)
 * @property string $userURI reference to an object of class "Security\User" (read-only)
 * @property \Security\User $user an object of class "Security\User"
 *
 * @package Blog
 * @version 0.9.9 beta
 */
class Post extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $title;
    protected $content;
    protected $createdAt;
    protected $comments;
    protected $userID;
    protected $userURI;
    protected $user;

    /**
     * Constructs object using a key-property array or instance of class "Blog\Post"
     *
     * @param array|void $data key-property array or instance of class "Blog\Post" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('title', $data))
            $data['title'] = ''; // a string
        if(!array_key_exists('content', $data))
            $data['content'] = ''; // a string
        if(!array_key_exists('createdAt', $data))
            $data['createdAt'] = new \NGS\LocalDate(); // a date
        if(!array_key_exists('comments', $data))
            $data['comments'] = array(); // an array of objects of class "Blog\Comment"
        if(!array_key_exists('userID', $data))
            $data['userID'] = ''; // a string
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('title', $data))
            $this->setTitle($data['title']);
        unset($data['title']);
        if (array_key_exists('content', $data))
            $this->setContent($data['content']);
        unset($data['content']);
        if (array_key_exists('createdAt', $data))
            $this->setCreatedAt($data['createdAt']);
        unset($data['createdAt']);
        if (array_key_exists('comments', $data))
            $this->setComments($data['comments']);
        unset($data['comments']);
        if (array_key_exists('userID', $data))
            $this->setUserID($data['userID']);
        unset($data['userID']);
        if (array_key_exists('user', $data))
            $this->setUser($data['user']);
        unset($data['user']);
        if(array_key_exists('userURI', $data))
            $this->userURI = \NGS\Converter\PrimitiveConverter::toString($data['userURI']);
        unset($data['userURI']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Blog\Post" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return a string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * @return a date
     */
    public function getCreatedAt()
    {
        return $this->createdAt;
    }

    /**
     * @return an array of objects of class "Blog\Comment"
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * @return a string
     */
    public function getUserID()
    {
        return $this->userID;
    }

    /**
     * @return a reference to an object of class "Security\User"
     */
    public function getUserURI()
    {
        return $this->userURI;
    }

    /**
     * @return an object of class "Security\User"
     */
    public function getUser()
    {
        if ($this->userURI !== null && $this->user === null)
            $this->user = \NGS\Patterns\Repository::instance()->find('Security\\User', $this->userURI);
        return $this->user;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'title')
            return $this->getTitle(); // a string
        if ($name === 'content')
            return $this->getContent(); // a string
        if ($name === 'createdAt')
            return $this->getCreatedAt(); // a date
        if ($name === 'comments')
            return $this->getComments(); // an array of objects of class "Blog\Comment"
        if ($name === 'userID')
            return $this->getUserID(); // a string
        if ($name === 'userURI')
            return $this->getUserURI(); // a reference to an object of class "Security\User"
        if ($name === 'user')
            return $this->getUser(); // an object of class "Security\User"

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Blog\Post" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'title')
            return true; // a string (always set)
        if ($name === 'content')
            return true; // a string (always set)
        if ($name === 'createdAt')
            return true; // a date (always set)
        if ($name === 'comments')
            return true; // an array of objects of class "Blog\Comment" (always set)
        if ($name === 'user')
            return true; // an object of class "Security\User" (always set)

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'userID', 'userURI');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        if($this->comments !== null) {
            foreach($this->comments as $child) {
                if($child->PostID !== $value)
                    $child->__setInternalcomments($this);
            }
        }
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setTitle($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "title" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->title = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setContent($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "content" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->content = $value;
        return $value;
    }

    /**
     * @param \NGS\LocalDate $value a date
     *
     * @return \NGS\LocalDate
     */
    public function setCreatedAt($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "createdAt" cannot be set to null because it is non-nullable!');
        $value = new \NGS\LocalDate($value);
        $this->createdAt = $value;
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Blog\Comment"
     *
     * @return array
     */
    public function setComments($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "comments" cannot be set to null because it is non-nullable!');
        $value = \Blog\CommentArrayConverter::fromArrayList($value, false);
        $this->comments = $value;
        if($this->comments !== null) {
            foreach($this->comments as $i => $child) {
                $child->Index = $i;
                $child->__setInternalcomments($this);
            }
        }
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    private function setUserID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "userID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->userID = $value;
        return $value;
    }

    /**
     * @param \Security\User $value an object of class "Security\User"
     *
     * @return \Security\User
     */
    public function setUser($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "user" cannot be set to null because it is non-nullable!');
        $value = \Security\UserArrayConverter::fromArray($value);
        if ($value->URI === null)
            throw new \InvalidArgumentException('Value of property "user" cannot have URI set to null because it\'s a reference! Reference values must have non-null URIs!');
        $this->user = $value;
        $this->userURI = $value->URI;
        $this->userID = $value->email;
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Blog\Post" cannot be set, because it is read-only!');
        if ($name === 'title')
            return $this->setTitle($value); // a string
        if ($name === 'content')
            return $this->setContent($value); // a string
        if ($name === 'createdAt')
            return $this->setCreatedAt($value); // a date
        if ($name === 'comments')
            return $this->setComments($value); // an array of objects of class "Blog\Comment"
        if ($name === 'user')
            return $this->setUser($value); // an object of class "Security\User"
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Blog\Post" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'title')
            throw new \LogicException('The property "title" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'content')
            throw new \LogicException('The property "content" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'createdAt')
            throw new \LogicException('The property "createdAt" cannot be unset because it is non-nullable!'); // a date (cannot be unset)
        if ($name === 'comments')
            throw new \LogicException('The property "comments" cannot be unset because it is non-nullable!'); // references to an array of objects of class "Blog\Comment" (cannot be unset)
        if ($name === 'user')
            throw new \LogicException('The property "user" cannot be unset because it is non-nullable!'); // an object of class "Security\User" (cannot be unset)
    }

    /**
     * Create or update Blog\Post instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        if ($this->comments !== null) {
            foreach ($this->comments as $this_comments) {
                if ($this_comments->userURI === null && $this_comments->userID !== null) {
                    throw new \LogicException('Cannot persist instance of "Blog\Post" because reference "user" (in "Blog\Comment") was not assigned');
                }
            }
        }
        if ($this->userURI === null && $this->userID !== null) {
            throw new \LogicException('Cannot persist instance of "Blog\Post" because reference "user" was not assigned');
        }
        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Blog\Post $result)
    {
        $this->URI = $result->URI;

        $this->title = $result->title;
        $this->content = $result->content;
        $this->createdAt = $result->createdAt;
        $this->comments = $result->comments;
        $this->userID = $result->userID;
        $this->user = $result->user;
        $this->userURI = $result->userURI;
        $this->ID = $result->ID;
    }
    public function addComments($item)
    {
        if(is_array($item)) {
            $item = \Blog\Comment($item);
        } elseif(!$item instanceof \Blog\Comment) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Blog\Comment"');
        }
        $list = $this->comments;
        if($list === null)
            $list = array();
        $item->__setInternalcomments($this);
        $list[] = $item;
        $item->Index = count($list) - 1;
        $this->comments = $list;
    }

    public function removeComments($item)
    {
        if(is_array($item)) {
            $item = \Blog\Comment($item);
        } elseif(!$item instanceof \Blog\Comment) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Blog\Comment"');
        }
        $list = $this->comments;
        if($list === null)
            $list = array();
        $itemIndex = array_search($item, $list);
        if($itemIndex !== false) {
            array_splice($list, $itemIndex, 1);

            $count = count($list);
            for($i = $itemIndex; $i < $count; $i++) {
                $list[$i]->Index = $i;
            }
            $this->comments = $list;
        }
    }

    public function toJson()
    {
        return \Blog\PostJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Blog\PostJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Blog\Post'.$this->toJson();
    }

    public function __clone()
    {
        return \Blog\PostArrayConverter::fromArray(\Blog\PostArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Blog\PostArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Blog\PostArrayConverter::toArray($this));
    }
}