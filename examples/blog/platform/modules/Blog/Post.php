<?php
namespace Blog;

require_once __DIR__.'/PostJsonConverter.php';
require_once __DIR__.'/PostArrayConverter.php';
require_once __DIR__.'/Category.php';
require_once __DIR__.'/Comment.php';
require_once __DIR__.'/Tag.php';
require_once __DIR__.'/Link.php';

/**
 * Generated from NGS DSL
 *
 * @property string $URI a unique object identifier (read-only)
 * @property int $ID autogenerated by server (read-only)
 * @property string $title a string
 * @property string $content a string
 * @property string $categoriesURI reference to an array of objects of class "Blog\Post"
 * @property array $categories an array of objects of class "Blog\Category", can be null
 * @property array $comments an array of objects of class "Blog\Comment", can be null
 * @property string $tagsURI reference to an array of objects of class "Blog\Post"
 * @property array $tags an array of objects of class "Blog\Tag"
 * @property array $links an array of objects of class "Blog\Link", can be null
 *
 * @package Blog
 * @version 0.9.9 beta
 */
class Post extends \NGS\Patterns\AggregateRoot implements \IteratorAggregate
{
    protected $URI;
    protected $ID;
    protected $title;
    protected $content;
    protected $categoriesURI;
    protected $categories;
    protected $comments;
    protected $tagsURI;
    protected $tags;
    protected $links;

    /**
     * Constructs object using a key-property array or instance of class "Blog\Post"
     *
     * @param array|void $data key-property array or instance of class "Blog\Post" or pass void to provide all fields with defaults
     */
    public function __construct($data = array(), $construction_type = '')
    {
        if(is_array($data) && $construction_type !== 'build_internal') {
            foreach($data as $key => $val) {
                if(in_array($key, self::$_read_only_properties, true))
                    throw new \LogicException($key.' is a read only property and can\'t be set through the constructor.');
            }
        }
        if (is_array($data)) {
            $this->fromArray($data);
        } else {
            throw new \InvalidArgumentException('Constructor parameter must be an array! Type was: '.\NGS\Utils::getType($data));
        }
    }

    /**
     * Supply default values for uninitialized properties
     *
     * @param array $data key-property array which will be filled in-place
     */
    private static function provideDefaults(array &$data)
    {
        if(!array_key_exists('URI', $data))
            $data['URI'] = null; //a string representing a unique object identifier
        if(!array_key_exists('ID', $data))
            $data['ID'] = 0; // an integer number
        if(!array_key_exists('title', $data))
            $data['title'] = ''; // a string
        if(!array_key_exists('content', $data))
            $data['content'] = ''; // a string
        if(!array_key_exists('tagsURI', $data))
            $data['tagsURI'] = array(); // references to an array of objects of class "Blog\Tag"
    }

    /**
     * Constructs object from a key-property array
     *
     * @param array $data key-property array
     */
    private function fromArray(array $data)
    {
        $this->provideDefaults($data);

        if(isset($data['URI']))
            $this->URI = \NGS\Converter\PrimitiveConverter::toString($data['URI']);
        unset($data['URI']);
        if (array_key_exists('ID', $data))
            $this->setID($data['ID']);
        unset($data['ID']);
        if (array_key_exists('title', $data))
            $this->setTitle($data['title']);
        unset($data['title']);
        if (array_key_exists('content', $data))
            $this->setContent($data['content']);
        unset($data['content']);
        if (array_key_exists('categories', $data))
            $this->setCategories($data['categories']);
        unset($data['categories']);
        if(array_key_exists('categoriesURI', $data))
            $this->categoriesURI = $data['categoriesURI'] === null ? null : \NGS\Converter\PrimitiveConverter::toStringArray($data['categoriesURI']);
        unset($data['categoriesURI']);
        if (array_key_exists('comments', $data))
            $this->setComments($data['comments']);
        unset($data['comments']);
        if (array_key_exists('tags', $data))
            $this->setTags($data['tags']);
        unset($data['tags']);
        if(array_key_exists('tagsURI', $data))
            $this->tagsURI = \NGS\Converter\PrimitiveConverter::toStringArray($data['tagsURI']);
        unset($data['tagsURI']);
        if (array_key_exists('links', $data))
            $this->setLinks($data['links']);
        unset($data['links']);

        if (count($data) !== 0 && \NGS\Utils::WarningsAsErrors())
            throw new \InvalidArgumentException('Superflous array keys found in "Blog\Post" constructor: '.implode(', ', array_keys($data)));
    }

// ============================================================================

    /**
     * Helper getter function, body for magic method $this->__get('URI')
     * URI is a string representation of the primary key.
     *
     * @return string unique resource identifier representing this object
     */
    public function getURI()
    {
        return $this->URI;
    }

    /**
     * @return an integer number
     */
    public function getID()
    {
        return $this->ID;
    }

    /**
     * @return a string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * @return a string
     */
    public function getContent()
    {
        return $this->content;
    }

    /**
     * @return references to an array of objects of class "Blog\Category"
     */
    public function getCategoriesURI()
    {
        return $this->categoriesURI;
    }

    /**
     * @return an array of objects of class "Blog\Category", can be null
     */
    public function getCategories()
    {
        if ($this->categoriesURI && $this->categories === null)
            $this->categories = \NGS\Patterns\Repository::instance()->find('Blog\\Category', $this->categoriesURI);
        return $this->categories;
    }

    /**
     * @return an array of objects of class "Blog\Comment", can be null
     */
    public function getComments()
    {
        return $this->comments;
    }

    /**
     * @return references to an array of objects of class "Blog\Tag"
     */
    public function getTagsURI()
    {
        return $this->tagsURI;
    }

    /**
     * @return an array of objects of class "Blog\Tag"
     */
    public function getTags()
    {
        if ($this->tagsURI && $this->tags === null)
            $this->tags = \NGS\Patterns\Repository::instance()->find('Blog\\Tag', $this->tagsURI);
        return $this->tags;
    }

    /**
     * @return an array of objects of class "Blog\Link", can be null
     */
    public function getLinks()
    {
        return $this->links;
    }

    /**
     * Property getter which throws Exceptions on invalid access
     *
     * @param string $name Property name
     *
     * @return mixed
     */
    public function __get($name)
    {
        if ($name === 'URI')
            return $this->getURI(); // a string representing a unique object identifier
        if ($name === 'ID')
            return $this->getID(); // an integer number
        if ($name === 'title')
            return $this->getTitle(); // a string
        if ($name === 'content')
            return $this->getContent(); // a string
        if ($name === 'categoriesURI')
            return $this->getCategoriesURI(); // references to an array of objects of class "Blog\Category"
        if ($name === 'categories')
            return $this->getCategories(); // an array of objects of class "Blog\Category", can be null
        if ($name === 'comments')
            return $this->getComments(); // an array of objects of class "Blog\Comment", can be null
        if ($name === 'tagsURI')
            return $this->getTagsURI(); // references to an array of objects of class "Blog\Tag"
        if ($name === 'tags')
            return $this->getTags(); // an array of objects of class "Blog\Tag"
        if ($name === 'links')
            return $this->getLinks(); // an array of objects of class "Blog\Link", can be null

        throw new \InvalidArgumentException('Property "'.$name.'" in class "Blog\Post" does not exist and could not be retrieved!');
    }

// ============================================================================

    /**
     * Property existence checker
     *
     * @param string $name Property name to check for existence
     *
     * @return bool will return true if and only if the propery exist and is not null
     */
    public function __isset($name)
    {
        if ($name === 'URI')
            return $this->URI !== null;
        if ($name === 'title')
            return true; // a string (always set)
        if ($name === 'content')
            return true; // a string (always set)
        if ($name === 'categories')
            return $this->getCategories() !== null; // an array of objects of class "Blog\Category", can be null
        if ($name === 'categoriesURI')
            return $this->getCategoriesURI() !== null; // an array of objects of class "Blog\Category", can be null
        if ($name === 'comments')
            return $this->getComments() !== null; // an array of objects of class "Blog\Comment", can be null
        if ($name === 'tags')
            return true; // an array of objects of class "Blog\Tag" (always set)
        if ($name === 'tagsURI')
            return true; // an array of objects of class "Blog\Tag" (always set)
        if ($name === 'links')
            return $this->getLinks() !== null; // an array of objects of class "Blog\Link", can be null

        return false;
    }

    private static $_read_only_properties = array('URI', 'ID', 'categoriesURI', 'tagsURI');

    /**
     * @param int $value an integer number
     *
     * @return int
     */
    private function setID($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "ID" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toInteger($value);
        $this->ID = $value;
        if($this->comments !== null) {
            foreach($this->comments as $child) {
                if($child->PostID !== $value)
                    $child->__setInternalcomments($this);
            }
        }
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setTitle($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "title" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->title = $value;
        return $value;
    }

    /**
     * @param string $value a string
     *
     * @return string
     */
    public function setContent($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "content" cannot be set to null because it is non-nullable!');
        $value = \NGS\Converter\PrimitiveConverter::toString($value);
        $this->content = $value;
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Blog\Category", can be null
     *
     * @return array
     */
    public function setCategories($value)
    {
        $value = $value !== null ? \Blog\CategoryArrayConverter::fromArrayList($value, false) : null;
        if($value !== null)
            foreach($value as $index => $val)
                if ($val->URI === null)
                    throw new \InvalidArgumentException('URI property of element at index "'.$index.'" was null! Root elements must have non-null URIs.');
        $this->categories = $value;
        if ($value !== null) {
            $this->categoriesURI = array();
            foreach($value as $val)
                $this->categoriesURI[] = $val->URI;

        } else {
            $this->categoriesURI = null;
        }
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Blog\Comment", can be null
     *
     * @return array
     */
    public function setComments($value)
    {
        $value = $value !== null ? \Blog\CommentArrayConverter::fromArrayList($value, false) : null;
        $this->comments = $value;
        if($this->comments !== null) {
            foreach($this->comments as $i => $child) {
                $child->Index = $i;
                $child->__setInternalcomments($this);
            }
        }
        return $value;
    }

    /**
     * @param array $value an array of objects of class "Blog\Tag"
     *
     * @return array
     */
    public function setTags($value)
    {
        if ($value === null)
            throw new \InvalidArgumentException('Property "tags" cannot be set to null because it is non-nullable!');
        $value = \Blog\TagArrayConverter::fromArrayList($value, false);
        if($value !== null)
            foreach($value as $index => $val)
                if ($val->URI === null)
                    throw new \InvalidArgumentException('URI property of element at index "'.$index.'" was null! Root elements must have non-null URIs.');
        $this->tags = $value;
            $this->tagsURI = array();
            foreach($value as $val)
                $this->tagsURI[] = $val->URI;

        return $value;
    }

    /**
     * @param array $value an array of objects of class "Blog\Link", can be null
     *
     * @return array
     */
    public function setLinks($value)
    {
        $value = $value !== null ? \Blog\LinkArrayConverter::fromArrayList($value, true) : null;
        $this->links = $value;
        return $value;
    }

    /**
     * Property setter which checks for invalid access to entity properties and enforces proper type checks
     *
     * @param string $name Property name
     * @param mixed $value Property value
     */
    public function __set($name, $value)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" in "Blog\Post" cannot be set, because it is read-only!');
        if ($name === 'title')
            return $this->setTitle($value); // a string
        if ($name === 'content')
            return $this->setContent($value); // a string
        if ($name === 'categories')
            return $this->setCategories($value); // an array of objects of class "Blog\Category", can be null
        if ($name === 'comments')
            return $this->setComments($value); // an array of objects of class "Blog\Comment", can be null
        if ($name === 'tags')
            return $this->setTags($value); // an array of objects of class "Blog\Tag"
        if ($name === 'links')
            return $this->setLinks($value); // an array of objects of class "Blog\Link", can be null
        throw new \InvalidArgumentException('Property "'.$name.'" in class "Blog\Post" does not exist and could not be set!');
    }

    /**
     * Will unset a property if it exists, but throw an exception if it is not nullable
     *
     * @param string $name Property name to unset (set to null)
     */
    public function __unset($name)
    {
        if(in_array($name, self::$_read_only_properties, true))
            throw new \LogicException('Property "'.$name.'" cannot be unset, because it is read-only!');
        if ($name === 'title')
            throw new \LogicException('The property "title" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'content')
            throw new \LogicException('The property "content" cannot be unset because it is non-nullable!'); // a string (cannot be unset)
        if ($name === 'categories')
            $this->setCategories(null);; // references to an array of objects of class "Blog\Category", can be null
        if ($name === 'comments')
            $this->setComments(null);; // references to an array of objects of class "Blog\Comment", can be null
        if ($name === 'tags')
            throw new \LogicException('The property "tags" cannot be unset because it is non-nullable!'); // references to an array of objects of class "Blog\Tag" (cannot be unset)
        if ($name === 'links')
            $this->setLinks(null);; // references to an array of objects of class "Blog\Link", can be null
    }

    /**
     * Create or update Blog\Post instance (server call)
     *
     * @return modified instance object
     */
    public function persist()
    {

        $newObject = parent::persist();
        $this->updateWithAnother($newObject);

        return $this;
    }

    private function updateWithAnother(\Blog\Post $result)
    {
        $this->URI = $result->URI;

        $this->title = $result->title;
        $this->content = $result->content;
        $this->categories = $result->categories;
        $this->categoriesURI = $result->categoriesURI;
        $this->comments = $result->comments;
        $this->tags = $result->tags;
        $this->tagsURI = $result->tagsURI;
        $this->links = $result->links;
        $this->ID = $result->ID;
    }

    /**
     * Add an instance of \Blog\Category to 'categories' array
     *
     * Workaround for lack of ability to add elements to array property using native array assignments (e.g. $object->categories[] = $item;)
     *
     * @param $item \Blog\Category|array Instance or property=>value array
     * @throws \InvalidArgumentException
     */
    public function addcategories($item)
    {
        if(is_array($item)) {
            $item = new \Blog\Category($item);
        } elseif(!$item instanceof \Blog\Category) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Blog\Category"');
        } elseif($this->categoriesURI !== null && in_array($item->URI, $this->categoriesURI, true)) {
            throw new \InvalidArgumentException('Can\'t add $item. Root with same URI is already in \'categories\' array');
        }
        if(!isset($item->URI)) {
            throw new \InvalidArgumentException('Element in collection property "categories" cannot have URI set to null, because it\'s a reference! Reference values must have non-null URIs!');
        }
        if($this->categories === null) {
            $this->categories = array();
        }
        if($this->categoriesURI === null) {
            $this->categoriesURI = array();
        }
        $this->categories[] = $item;
        $this->categoriesURI[] = $item->URI;
    }

    /**
     * Remove item from 'categories' array
     *
     * @param \Blog\Category|string|array Instance, item URI, or property=>value array (?remove?)
     * @throws \InvalidArgumentException
     */
    public function removecategories($item)
    {
        if(is_array($item)) {
            if (!isset($item['URI']) || !is_string($item['URI'])) {
                throw new \InvalidArgumentException('Can\'t remove item with invalid URI');
            }
            $itemURI = $item['URI'];
        } elseif(is_string($item)) {
            $itemURI = $item;
        } elseif(!$item instanceof \Blog\Category) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Blog\Category"');
        } else {
            $itemURI = $item->URI;
        }
        if ($this->categories === null) {
            return ;
        }
        $itemIndex = array_search($itemURI, $this->categoriesURI);
        if($itemIndex !== false) {
            array_splice($this->categories, $itemIndex, 1);
            array_splice($this->categoriesURI, $itemIndex, 1);
        }
    }

    /**
     * Add an instance of \Blog\Tag to 'tags' array
     *
     * Workaround for lack of ability to add elements to array property using native array assignments (e.g. $object->tags[] = $item;)
     *
     * @param $item \Blog\Tag|array Instance or property=>value array
     * @throws \InvalidArgumentException
     */
    public function addtags($item)
    {
        if(is_array($item)) {
            $item = new \Blog\Tag($item);
        } elseif(!$item instanceof \Blog\Tag) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Blog\Tag"');
        } elseif($this->tagsURI !== null && in_array($item->URI, $this->tagsURI, true)) {
            throw new \InvalidArgumentException('Can\'t add $item. Root with same URI is already in \'tags\' array');
        }
        if(!isset($item->URI)) {
            throw new \InvalidArgumentException('Element in collection property "tags" cannot have URI set to null, because it\'s a reference! Reference values must have non-null URIs!');
        }
        if($this->tags === null) {
            $this->tags = array();
        }
        if($this->tagsURI === null) {
            $this->tagsURI = array();
        }
        $this->tags[] = $item;
        $this->tagsURI[] = $item->URI;
    }

    /**
     * Remove item from 'tags' array
     *
     * @param \Blog\Tag|string|array Instance, item URI, or property=>value array (?remove?)
     * @throws \InvalidArgumentException
     */
    public function removetags($item)
    {
        if(is_array($item)) {
            if (!isset($item['URI']) || !is_string($item['URI'])) {
                throw new \InvalidArgumentException('Can\'t remove item with invalid URI');
            }
            $itemURI = $item['URI'];
        } elseif(is_string($item)) {
            $itemURI = $item;
        } elseif(!$item instanceof \Blog\Tag) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Blog\Tag"');
        } else {
            $itemURI = $item->URI;
        }
        if ($this->tags === null) {
            return ;
        }
        $itemIndex = array_search($itemURI, $this->tagsURI);
        if($itemIndex !== false) {
            array_splice($this->tags, $itemIndex, 1);
            array_splice($this->tagsURI, $itemIndex, 1);
        }
    }

    public function addComments($item)
    {
        if(is_array($item)) {
            $item = \Blog\Comment($item);
        } elseif(!$item instanceof \Blog\Comment) {
            throw new \InvalidArgumentException('Can\'t add $item. It must be an instance or array of "Blog\Comment"');
        }
        $list = $this->comments;
        if($list === null)
            $list = array();
        $item->__setInternalcomments($this);
        $list[] = $item;
        $item->Index = count($list) - 1;
        $this->comments = $list;
    }

    public function removeComments($item)
    {
        if(is_array($item)) {
            $item = \Blog\Comment($item);
        } elseif(!$item instanceof \Blog\Comment) {
            throw new \InvalidArgumentException('Can\'t remove $item. It must be an instance or array of "Blog\Comment"');
        }
        $list = $this->comments;
        if($list === null)
            $list = array();
        $itemIndex = array_search($item, $list);
        if($itemIndex !== false) {
            array_splice($list, $itemIndex, 1);

            $count = count($list);
            for($i = $itemIndex; $i < $count; $i++) {
                $list[$i]->Index = $i;
            }
            $this->comments = $list;
        }
    }

    public function toJson()
    {
        return \Blog\PostJsonConverter::toJson($this);
    }

    public static function fromJson($item)
    {
        return \Blog\PostJsonConverter::fromJson($item);
    }

    public function __toString()
    {
        return 'Blog\Post'.$this->toJson();
    }

    public function __clone()
    {
        return \Blog\PostArrayConverter::fromArray(\Blog\PostArrayConverter::toArray($this));
    }

    public function toArray()
    {
        return \Blog\PostArrayConverter::toArray($this);
    }

    /**
     * Implementation of the IteratorAggregate interface via \ArrayIterator
     *
     * @return Traversable a new iterator specially created for this iteratation
     */
    public function getIterator()
    {
        return new \ArrayIterator(\Blog\PostArrayConverter::toArray($this));
    }
}